base-config:
  id: base # Bundle id for default variation
  dir: ./isomorphic/base # Source dir for default variation
  outdir: ./build # Base output dir for all artifacts

variation-config:
  variation-dirs:
    - ./isomorphic/variations
  # dir names should be unique across all roots or mendel throws
  variations:
    unexisting_folder:
    bucket_A:
      - unexisting_folder
    feature_B:
    partner_C:
    bucket_D:
      - partner_C

route-config:
  # bundle does not have extension has it can be css bundle.
  variation: /mendel/:variations/:bundle # Route pattern during development for variational assets
  hash: /mendel/:hash/:bundle # Route pattern during production for variational assets

# plugins are declared upfront and used by "types" bellow
# you can have multiple instances of the same plugin with different ids
transforms: # a list of all available transforms for all envs and types
  babel: # id or reference of a plugin instance
    plugin: mendel-transform-babel # name of the plugin to be used, plugin must be installed in your project
    options: # configuration object passed to plugin instance, each plugin has it's own format and documentation
      presets:
        - es2015
        - react
  uglyfy: # Example configuration for Babel + Uglification
    plugin: mendel-transform-babel
    options:
      comments: false # true - Output comments in generated output.
      compact: true # true - Do not include superfluous whitespace characters and line terminators
      presets:
        -
          - es2015
          -
            loose: true # Preset "es2015-loose" is incompatible for mendel
        - react
  json-parse: # Parsing JSON files to be usable in JS
    plugin: mendel-parser-json
  less-transform:
    plugin: mendel-transform-less
  babel-test: # Example configuration for istanbul
    plugin: mendel-transform-babel
    options:
      presets:
        - es2015
        - react
      plugins:
        - istanbul

# types of entries to be transformed or parsed
types:
  json: # Type id. Doesn't have to be file extension.
    extensions:
      - .json
    parser: json-parse # Uses parser defined in transforms. (Optional)
    parser-to-type: js # Maps to type defined below (Required when parser is defined)
    include-node_modules: true # Include files matching node_modules/* path.
  js:
    transforms:
      - babel
    glob:
      - "**/*.{js,jsx}"
      - "!**/_test_/*"
  jstest:
    transforms:
      - babel
    glob:
      - "./**/_test_/*"
  less:
    extensions:
      - .less
    parser: less-transform
    parser-to-type: css
    resource: true # Resources are filtered from executables list (#getExecutableEntries in MendelOutletRegistry)
  css:
    extensions:
      - .css
    resource: true

# Defines the supported ways for outputting bundles
outlets:
  - id: manifest
    plugin: mendel-outlet-manifest # Serialization of bundle. Can be deserialized for future use
  - id: css
    plugin: mendel-outlet-css
    options:
      plugin:
        -
          - autoprefixer
          -
            browsers: "last 2 versions"
  - id: css-rtl
    plugin: mendel-outlet-css
    options:
      plugin:
        -
          - autoprefixer
          -
            browsers: "last 2 versions"
        - rtlcss
  - id: browser-pack # Outputs stream compatible artifacts
    plugin: mendel-outlet-browser-pack

  - id: ssr
    plugin: mendel-outlet-server-side-render # Outputs artifacts for server side render
    options:
      dir: server # appended after the "outdir" in base config
      requireTransform: true
      includeNodeModules: false # default false

# needs to be array because order is relevant
# if extract-bundles comes first, some node_modules that
#     only lazy bundle needs will be part of the lazy bundle
# if node-modules first, extract-bundles will operate on source files only
#     because all node_modules are extracted by node-modules generators
generators: # AKA graph transforms - or graph operations
  - id: extract-bundles
    plugin: mendel-generator-extract
  - id: node-modules-generator
    plugin: mendel-generator-node-modules

# "outfile" is optional and only needed for single layer generation
# If "generator" is not present, we use default generator.
# Default generator walks dependency graph from entries and collects them into bundle.
bundles:
  main:
    outlet: browser-pack
    outfile: main.js # Writes to outdir
    entries:
      - ./main.js
  lazy:
    outlet: browser-pack
    outfile: lazy.js
    generator: extract-bundles
    from: main # Bundle Id. Extracts these entries from main bundle
    entries:
      - ./components/lazy.js
  vendor:
    outlet: browser-pack
    outfile: vendor.js
    generator: node-modules-generator
    from:
      - main # have array of bundleId or keyword "all"
      - lazy
    entries:
      # This file either has to be part of dependency graph or source
      # or it has to be part of a variation's source folder.
      # Otherwise, it is not added to Mendel at all.
      - ./vendor/large-code.js

  css:
    outlet: css
    outfile: main.css # File gets written to ${outdir}/main.css
    entries:
      - "**/*.css"
      - "**/*.less"
      - "!css/reset.css"
  css-rtl:
    outlet: css-rtl
    outfile: main-rtl.css
    entries:
      - "**/*.css"
      - "**/*.less"
      - "!css/reset.css"

env:
  test:
    support: test/**/*.js
    types:
      js:
        transforms:
          - babel-test
        glob:
          - "./**/*.{js,jsx}"
          - "!./**/_test_/*"
  production:
    types:
      js:
        transforms:
          - uglyfy # Transform "js" type in this environment

    postgenerators:
      - id: prune
        plugin: mendel-generator-prune
        groups:
          -
            # Regard below bundles as one
            # and do necessary clean ups
            - main
            - lazy
            - vendor

    bundles:
      main:
        outlet: manifest
        manifest: main.manifest.json
      vendor:
        outlet: manifest
        manifest: vendor.manifest.json
      lazy:
        outlet: manifest
        manifest: lazy.manifest.json
      server:
        outlet: ssr
        manifest: ssr.manifest.json
        # Following options are used in creating bundle
        outfile: server.js
        entries:
          - ./main.js
        # If npm package has multiple entry files, this pulls only
        # server side entry file defined in "main" field of package.json
        runtime: main
